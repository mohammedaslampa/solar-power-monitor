// Wire Slave Receiver
// by Nicholas Zambetti <http://www.zambetti.com>

// Demonstrates use of the Wire library
// Receives data as an I2C/TWI slave device
// Refer to the "Wire Master Writer" example for use with this

// Created 29 March 2006

// This example code is in the public domain.


#include <Wire.h>

#define THERMISTORPIN A2
#define LDRPIN A3
#define PIRPIN 13
// resistance at 25 degrees C
#define THERMISTORNOMINAL 100000
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 13
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10000

int samples[NUMSAMPLES];
unsigned long previousMillis = 0;
const long interval = 1000;  

//const int lm0 = 9;
//const int lm1 = 10;
//const int lm2 = 11;
//const int lm3 = 12;
//const int lm4 = 8;

byte val,val1,val2,val3,val4;
bool chng;
int sensorValue0, sensorValue1;

void setup()
{
  Wire.begin(0x45);                // join i2c bus with address #4
  Wire.onReceive(receiveEvent); // register event
  Serial.begin(9600);           // start serial for output
  pinMode(THERMISTORPIN, INPUT);
  pinMode(LDRPIN, INPUT);
  DDRB = DDRB | B00011111;     //0 - 4 output 
  DDRB = DDRB & B11011111;      //5 as input  or DDRB |= ~(1<<2) 
  DDRD = DDRD | B11100000;     //567 as output
}
void loop()
{
  if (chng) {
    PORTB |= (val & B00011111);  //making  last 3 bits zero for setting firt 5 
    PORTB &= (val | B11100000);  //making last 3 bits one for clearing first 5
    PORTD |= (val & B11100000);
    PORTD &= (val | B00011111);
    Serial.print("chng");
    Serial.println(val,BIN);
   // analogWrite(9, val1);
  //  analogWrite(10, val2);
   // analogWrite(11, val3);
   // analogWrite(3, val4);
    chng = 0;
  }
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;
    
  sensorValue0 = tempread();
  sensorValue1 = avrg(LDRPIN);
  Serial.print("PB");
  Serial.println(PINB,BIN);
  Serial.print("PD");
  Serial.println(PIND,BIN);
  Serial.print("s1 = ");
  Serial.println(sensorValue0);
}
}

// function that executes whenever data is received from master
// this function is registered as an event, see setup()


void receiveEvent(int howMany)
{
  while (0 < Wire.available()) // loop through all but the last
  {
    val = Wire.read(); // receive byte as a character
    val1 = Wire.read();
    val2 = Wire.read();
    val3 = Wire.read();
    val4 = Wire.read();
    Serial.println("val");
    Serial.println(val, BIN);        // print the character
    //Serial.println("val1");
   // Serial.println(val1, DEC);
    //Serial.println("val2");
   // Serial.println(val2, DEC);
    //Serial.println("val3");
  //  Serial.println(val3, DEC);
    //Serial.println("val4");
   // Serial.println(val4, DEC);
    chng = 1;
  }
}

float tempread() {

  float average;
  average = avrg(THERMISTORPIN);
  // convert the value to resistance
  average = 1023 / average - 1;
  average = SERIESRESISTOR / average;
  float steinhart;
  steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
  steinhart = log(steinhart);                  // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart;                 // Invert
  steinhart -= 273.15;                         // convert to C
  return steinhart;
}
float avrg(const int spin) {
  uint8_t i;
  float avrage;
  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++) {
    samples[i] = analogRead(spin);
    delay(10);
  }

  // average all the samples out
  avrage = 0;
  for (i = 0; i < NUMSAMPLES; i++) {
    avrage += samples[i];
  }
  avrage /= NUMSAMPLES;
  return avrage;
}
